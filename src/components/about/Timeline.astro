---
interface Event {
  event: string;
  place: string;
  time: string[];
  tasks: string[];
}

const { events = [] }: { events?: Event[] } = Astro.props
---

<div class="grid grid-cols-1 sm:grid-cols-2 gap-10 sm:gap-5 overflow-auto px-0 lg:flex-grow lg:max-h-full text-justify">
    {events.map(({ event, place, time, tasks }, index) => (
        <div class="grid grid-cols-[auto_1fr] gap-2 sm:p-2 sm:rounded sm:bg-gray-400/20">
            <div class="w-8 h-8 grid items-center justify-center rounded-full bg-lime-400/80 dark:bg-teal-400/50">
                <span class="font-title tracking-widest text-lg">{ index + 1 }</span>
            </div>
            <section class="flex flex-col gap-1">
                <h3 class="font-title tracking-widest text-lg sm:text-xl">
                    { event }
                </h3>

                <div class="flex flex-col gap-0">
                    <span class="font-extrabold text-lg sm:text-xl text-sky-900 dark:text-sky-300">
                        { place }
                    </span>

                    { time.map((t) => (
                        <span class="font-semibold sm:text-lg text-gray-700 dark:text-gray-100">
                            { t }
                        </span>
                    ))}
                </div>

                <section class="flex flex-col gap-1 sm:text-lg">
                    <h4 class="font-title tracking-widest underline underline-offset-4 decoration-4 decoration-rose-500 text-slate-800 dark:text-slate-300">
                        Responsabilidades
                    </h4>
                    <ul class="list-disc pl-4 font-extrabold text-gray-900 dark:text-gray-300">
                        { tasks.map((task) => (
                            <li>{ task }</li>
                        ))}
                    </ul>
                </section>
            </section>
        </div>
    ))}
</div>
